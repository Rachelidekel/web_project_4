!function(){"use strict";class e{constructor(e,t,s){let{data:i,handleCardClick:r,handleLikeIcon:n,handleDeleteIcon:o}=e;var a,l;l=()=>(this._listItem=this._getTemplate(),this._title=this._listItem.querySelector(".element__title-name"),this._image=this._listItem.querySelector(".element__item"),this._title.textContent=this._name,this._image.src=this._link,this._image.alt="Landscape image from a place named ".concat(this._name),this._addEventListeners(),this._ownerId!==this._userId&&(this._deleteButton.style.display="none"),this._listItem.querySelector(".element__likes-count").textContent=this._likes.length,this.isLiked()&&this.likeCard(this._likes),this._listItem),(a="generateCard")in this?Object.defineProperty(this,a,{value:l,enumerable:!0,configurable:!0,writable:!0}):this[a]=l,this._name=i.name,this._link=i.link,this._likes=i.likes,this._templateCardSelector=t,this._handleCardClick=r,this._handleDeleteIcon=o,this._handleLikeIcon=n,this._id=i._id,this._userId=s,this._ownerId=i.owner._id}_getTemplate(){return document.querySelector(this._templateCardSelector).content.querySelector(".element").cloneNode(!0)}isLiked(){return this._likes.some((e=>e._id===this._userId))}removeCard(){this._listItem.remove(),this._listItem=null}likeCard(e){this._likes=e,this._listItem.querySelector(".element__likes-count").textContent=this._likes.length,this._listItem.querySelector(".element__title-button").classList.toggle("element__title-button_active")}_addEventListeners(){this._likeButton=this._listItem.querySelector(".element__title-button"),this._deleteButton=this._listItem.querySelector(".element__delete-button"),this._likeButton.addEventListener("click",(()=>{this._handleLikeIcon(this._id)})),this._deleteButton.addEventListener("click",(()=>{this._handleDeleteIcon(this._id)})),this._image.addEventListener("click",(()=>{this._handleCardClick(this._name,this._link)}))}}function t(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}var s=class{constructor(e,s){t(this,"_isFormValid",(()=>this._inputs.every((e=>!0===e.validity.valid)))),t(this,"_toggleButtonState",(()=>{const{inactiveButtonClass:e}=this._settings;this._isFormValid()?this._enableSubmitButton(this._button,e):this._disableSubmitButton(this._button,e)})),t(this,"_setEventListeners",(()=>{const{inputSelector:e,submitButtonSelector:t}=this._settings;this._inputs=[...this._form.querySelectorAll(e)],this._button=this._form.querySelector(t),this._inputs.forEach((e=>{e.addEventListener("input",(()=>{this._checkValidity(e,this._settings),this._toggleButtonState()}))}))})),this._settings=e,this._form=s}_showError(e){const{inputErrorClass:t,errorClass:s}=this._settings,i=e.validationMessage,r=this._form.querySelector("#".concat(e.id,"-error"));r.textContent=i,r.classList.add(s),e.classList.add(t)}_hideError(e){const{inputErrorClass:t,errorClass:s}=this._settings,i=this._form.querySelector("#".concat(e.id,"-error"));i.textContent="",i.classList.remove(s),e.classList.remove(t)}_checkValidity(e){e.validity.valid?this._hideError(e):this._showError(e)}_disableSubmitButton(e){const{inactiveButtonClass:t}=this._settings;e.disabled=!0,e.classList.add(t)}_enableSubmitButton(e){const{inactiveButtonClass:t}=this._settings;e.disabled=!1,e.classList.remove(t)}resetValidation(){this._inputs.forEach((e=>{this._hideError(e)})),this._toggleButtonState()}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}};function i(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class r{constructor(e){i(this,"_handleEscClose",(e=>{"Escape"===e.key&&this.close()})),i(this,"_handleOverlayClose",(e=>{(e.target.classList.contains("popup")||e.target.classList.contains("popup__close-button"))&&this.close()})),this._popup=document.querySelector(e),this.close.bind(this)}open(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose),document.addEventListener("mousedown",this._handleOverlayClose)}close(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose),document.removeEventListener("mousedown",this._handleOverlayClose)}setEventListeners(){this._popup.querySelector(".popup__close-icon").addEventListener("click",(()=>{this.close()}))}}class n extends r{constructor(e,t){super(e),this._submitHandler=t,this._form=this._popup.querySelector(".popup__form"),this._inputs=[...this._form.querySelectorAll(".form__input")]}_getInputValues(){const e={};return this._inputs.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._submitHandler(this._getInputValues()),this.close()}))}close(){super.close(),this._form.reset()}}class o{constructor(e,t){let{items:s,renderer:i}=e;this._items=s,this._renderer=i,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._element=this._renderer(e)}))}addItem(e){this._container.prepend(e)}}const a=(e,t)=>fetch(e,t).then((e=>e.ok?e.json():Promise.reject(e.statusText))).catch(console.log);function l(e,t){e.textContent=t}const c=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}getInitialCards(){return a("".concat(this._baseUrl,"/cards"),{headers:this._headers})}getUserInfo(){return a("".concat(this._baseUrl,"/users/me"),{headers:this._headers})}setUserInfo(e,t){return a("".concat(this._baseUrl,"/users/me"),{headers:this._headers,method:"PATCH",body:JSON.stringify({name:e,about:t})})}createCard(e){return a("".concat(this._baseUrl,"/cards"),{headers:this._headers,method:"POST",body:JSON.stringify(e)})}deleteCard(e){return a("".concat(this._baseUrl,"/cards/").concat(e),{headers:this._headers,method:"DELETE"})}likeCard(e){return a("".concat(this._baseUrl,"/cards/likes/").concat(e),{headers:this._headers,method:"PUT"})}dislikeCard(e){return a("".concat(this._baseUrl,"/cards/likes/").concat(e),{headers:this._headers,method:"DELETE"})}setUserAvatar(e){return a("".concat(this._baseUrl,"/users/me/avatar"),{headers:this._headers,method:"PATCH",body:JSON.stringify({avatar:e})})}}({baseUrl:"https://around.nomoreparties.co/v1/group-1",headers:{authorization:"a0dd5829-1b51-4f9b-93c7-6d4f8e85cb31","Content-Type":"application/json"}}),_=document.querySelector(".popup_type_edit"),d=document.querySelector(".popup_type_add-card"),u=document.querySelector(".popup_type_avatar"),h=(document.querySelector(".elements__list"),_.querySelector(".popup__form")),p=d.querySelector(".popup__form"),m=u.querySelector(".popup__form"),b=document.querySelector(".form__input_type_name"),f=document.querySelector(".form__input_type_job"),v=document.querySelector(".profile__open-button"),y=document.querySelector(".profile__add-button"),S=document.querySelector(".profile__avatar-overlay"),C=document.querySelector(".profile__image"),g=document.querySelector(".profile__avatar-image"),k={inputSelector:".form__input",submitButtonSelector:".form__button",inactiveButtonClass:"form__button_disabled",inputErrorClass:"form__input_type_error",errorClass:"popup__error_visible"},E=h.querySelector(k.submitButtonSelector),L=p.querySelector(k.submitButtonSelector),I=m.querySelector(k.submitButtonSelector);let q,U;const w=new class{constructor(e){let{profileNameSelector:t,profileJobSelector:s}=e;this._profileName=document.querySelector(t),this._profileJob=document.querySelector(s)}getUserInfo(){return{name:this._profileName.textContent,job:this._profileJob.textContent}}setUserInfo(e){let{profileNameInput:t,profileJobInput:s}=e;this._profileName.textContent=t,this._profileJob.textContent=s}setUserAvatar(e,t){this._avatar=e,this._avatar.src=t}}({profileNameSelector:".profile__title-name",profileJobSelector:".profile__subtitle-job",profileAvatarSelector:".profile__image"});Promise.all([c.getInitialCards(),c.getUserInfo()]).then((e=>{let[t,s]=e;U=new o({items:t,renderer:e=>U.addItem(V(e))},".elements__list"),q=s._id,U.renderItems(),w.setUserInfo({profileNameInput:s.name,profileJobInput:s.about}),g.prepend(C),w.setUserAvatar(C,s.avatar)}));const B=new class extends r{constructor(e){var t,s;super(e),s=e=>{super.open(),this._name=e.name,this._link=e.link,this._imageCardCaptionModal.textContent=this._name,this._imageCardModal.src=this._link,this._imageCardModal.alt="Landscape image from a place named ".concat(this._name)},(t="open")in this?Object.defineProperty(this,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):this.open=s,this._imageCardModal=this._popup.querySelector(".popup__image"),this._imageCardCaptionModal=this._popup.querySelector(".popup__caption")}}(".popup_type_image");B.setEventListeners();const x=new class extends r{setAction(e){this._submitHandler=e}setEventListeners(){this._popup.addEventListener("submit",(e=>{e.preventDefault(),this._submitHandler(),this.close()})),super.setEventListeners()}}(".popup_type_delete-card");function V(t){const s=new e({data:t,handleCardClick:()=>{B.open(t)},handleLikeIcon:e=>{s.isLiked()?c.dislikeCard(e).then((e=>{s.likeCard(e.likes)})):c.likeCard(e).then((e=>{s.likeCard(e.likes)}))},handleDeleteIcon:e=>{x.open(),x.setAction((()=>{c.deleteCard(e).then((e=>{s.removeCard(),x.close()}))}))}},".element__template",q);return s.generateCard()}x.setEventListeners();const j=new n(".popup_type_edit",(function(e){l(E,"Saving..."),c.setUserInfo(e.name,e.job).then((e=>{l(E,"Save"),w.setUserInfo({profileNameInput:e.name,profileJobInput:e.about}),j.close()}))}));j.setEventListeners();const A=new n(".popup_type_add-card",(function(e){l(L,"Creating..."),c.createCard(e).then((e=>{V(e),l(L,"Create"),U.addItem(V(e)),A.close()}))}));A.setEventListeners();const N=new n(".popup_type_avatar",(function(e){l(I,"Saving..."),c.setUserAvatar(e).then((e=>{w.setUserInfo(C,e.avatar),l(I,"Save"),setUserAvatar(e),N.close()}))}));N.setEventListeners();const J=new s(k,h),O=new s(k,p),P=new s(k,m);J.enableValidation(),O.enableValidation(),P.enableValidation(),v.addEventListener("click",(()=>{!function(){const{name:e,job:t}=w.getUserInfo();b.value=e,f.value=t}(),J.resetValidation(),j.open()})),y.addEventListener("click",(()=>{O.resetValidation(),A.open()})),S.addEventListener("click",(()=>{P.resetValidation(),N.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,